from .requests_client import requests_client_interface
import telebot
from telebot import types
from . import settings

telebot_token = settings.telebot_token
# aiohttp_call = aiohttp_client_interface.aiohttp_call

bot = telebot.TeleBot(telebot_token)

@bot.message_handler(commands=['ping'])
def ping_pong(message):
    result = requests_client_interface.ping()
    result = str(result)
    bot.send_message(message.chat.id, result)

@bot.message_handler(commands=['start'])
def start(message):
    conf_id = str(message.chat.id)
    conf_options = '100'
    result = requests_client_interface.add_conf(conf_id=conf_id, conf_options=conf_options)['result']
    # print('result:',result)
    if result == 0:
        bot.send_message(message.chat.id, '–ë–æ—Ç —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ–π –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏')
    elif result == 1:
        bot.send_message(message.chat.id, '''–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.
–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏,
/menu –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º,
/event - —Ç–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞''')


@bot.message_handler(commands=['help'])
def send_help(message):
    keyboard = types.InlineKeyboardMarkup()
    bot.send_message(message.chat.id, 'help', reply_markup=keyboard)


@bot.message_handler(commands=['menu'])
def send_menu(message):
    chat_id = str(message.chat.id)
    chat_exist = requests_client_interface.check_conf_exist(chat_id)['result']
    if chat_exist == 0:
        bot.send_message(message.chat.id, '–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ /start')
        return None
    
    bot_active_flag, event_cost_flag, filter_themes_flag = requests_client_interface.get_conf_options(chat_id)['conf_options']
    if bot_active_flag == '1':
        bot_active_text = 'üü¢ –ë–æ—Ç –≤–∫–ª—é—á—ë–Ω'
    else:
        bot_active_text = 'üî¥ –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω'
    
    if event_cost_flag == '1':
        event_cost_text = 'üü§ –¢–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ\n   –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)'
    else:
        event_cost_text = 'üü§ –¢–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ\n   –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)'

    if filter_themes_flag == '1':
        filter_themes_text = 'üü¢ –í–∫–ª—é—á–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ç–µ–º–∞–º'
    else:
        filter_themes_text = 'üî¥ –í—ã–∫–ª—é—á–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–º–∞–º'

    message_text = '–ú–µ–Ω—é –±–æ—Ç–∞:'+'\n'+bot_active_text+'\n'+event_cost_text+'\n'+filter_themes_text

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–í–∫–ª/–≤—ã–∫–ª –±–æ—Ç–∞",callback_data='bot_active_button'))
    keyboard.add(types.InlineKeyboardButton(text="–í–∫–ª/–≤—ã–∫–ª –ø–ª–∞—Ç–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",callback_data='event_cost_button'))
    keyboard.add(types.InlineKeyboardButton(text="–í–∫–ª/–≤—ã–∫–ª —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ç–µ–º–∞–º",callback_data='filter_themes_button'))
    if filter_themes_flag == '1':
        keyboard.add(types.InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ–º—ã",callback_data='filter_themes_menu_button'))
    
    bot.send_message(message.chat.id, message_text, reply_markup=keyboard)


# def send_event_info(chat_id, event_id):
@bot.message_handler(commands=['event'])
def send_event_info(message):
    chat_id = message.chat.id
    # event_id = 'velopark'
    # event_id = '00000000'
    # event_id = '8892929292'
    event_id = '101011101'
    # keyboard = types.InlineKeyboardMarkup()
    # keyboard.add(types.InlineKeyboardButton(text="–í–∫–ª/–≤—ã–∫–ª –±–æ—Ç–∞",callback_data='off_on_bot'))
    # keyboard.add(types.InlineKeyboardButton(text="–í–∫–ª/–≤—ã–∫–ª –ø–ª–∞—Ç–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",callback_data='off_on_cost'))
    # keyboard.add(types.InlineKeyboardButton(text="–í–∫–ª/–≤—ã–∫–ª –ø–æ–¥–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏",callback_data='off_on_subconfs'))
    # keyboard.add(types.InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ–º—ã",callback_data='filter_theme'))
    # bot.send_message(message.chat.id, '–º–µ–Ω—é –±–æ—Ç–∞', reply_markup=keyboard)
    bot_active_flag, event_cost_flag, filter_themes_flag = requests_client_interface.get_conf_options(chat_id)['conf_options']
    if bot_active_flag == '0':
        bot.send_message(chat_id, '–±–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω')
        return None

    if requests_client_interface.check_event_exist(event_id)['result'] == 0:
        bot.send_message(chat_id, 'event_id –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        return None

    event_name = requests_client_interface.get_event_name(event_id)['event_name']
    event_descr = requests_client_interface.get_event_descr(event_id)['event_descr']
    event_date = requests_client_interface.get_event_date(event_id)['event_date']
    event_url = requests_client_interface.get_event_url(event_id)['event_url']
    event_theme = requests_client_interface.get_event_theme(event_id)['event_theme']
    message_text = f"""–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {event_name} ({event_date}).
–û–ø–∏—Å–∞–Ω–∏–µ: {event_descr}
–°—Å—ã–ª–∫–∞: {event_url}
–¢–µ–≥–∏: {','.join(event_theme)}"""

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ",url=event_url))
    keyboard.add(types.InlineKeyboardButton(text="–Ø –ø–æ–π–¥—É",callback_data=f'user_go_event_button:{event_id}', pay='–°—Ç—Ä–æ–∫–∞'))
    keyboard.add(types.InlineKeyboardButton(text="–Ø –Ω–µ –ø–æ–π–¥—É",callback_data=f'user_doesnt_go_event_button:{event_id}'))
    keyboard.add(types.InlineKeyboardButton(text="–ù–∞–ø–æ–º–Ω–∏—Ç—å –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏",callback_data=f'remind_user_go_event_button:{event_id}'))
    bot.send_message(chat_id, message_text, reply_markup=keyboard)




    # –∫–∞–∫ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
	# bot.reply_to(message, "Howdy, how are you doing?")

# @bot.message_handler(content_types=['text'])
# def get_text_messages(message):
#     # keyboard = types.InlineKeyboardMarkup()
#     # url_button = types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å",callback_data='text')
#     # keyboard.add(url_button)
#     # bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –ø–µ—Ä–µ–π–¥–∏ –≤ –ø–æ–∏—Å–∫–æ–≤–∏–∫.", reply_markup=keyboard)
    
#     # print(type(message))
#     # print(message)
#     if message.text.lower() == '–¥–∞–π':
#         send_event_info(message.chat.id, 'velopark')
#     elif message.text.lower() == 'ping':
#         result = requests_client_interface.ping()
#         # result = str(result)
#         bot.send_message(message.chat.id, result)

    # print(type(message.from_user))
    # if message.text == "–ü—Ä–∏–≤–µ—Ç":
    #     bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç, —á–µ–º —è –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å?")
    # elif message.text == "/help":
    #     bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏ –ø—Ä–∏–≤–µ—Ç")
    # else:
    #     bot.send_message(message.from_user.id, "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ù–∞–ø–∏—à–∏ /help.")
    # if message.text == "–ü—Ä–∏–≤–µ—Ç":
    #     bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, —á–µ–º —è –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å?")
    # elif message.text == "/help":
    #     bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ –ø—Ä–∏–≤–µ—Ç")
    # else:
    #     bot.send_message(message.chat.id, "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ù–∞–ø–∏—à–∏ /help.")

    

    # if message.text in ['/help','/help@besthangout_bot']:
    #     all_events = redis_ORM.get_all_events()
    #     bot.send_message(message.chat.id, \
    #             f'''–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:"/b –ø–æ–π–¥—É –Ω–∞ id_–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"\n–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:"/b —Å–æ–∑–¥–∞—Ç—å id_–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"\n–°–ø–∏—Å–æ–∫ –∫—Ç–æ –∑–∞–ø–∏—Å–∞–ª—Å—è:"/b –∫—Ç–æ –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ id_–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è {all_events}''', \
    #             reply_markup=keyboard)
    # elif message.text.startswith('/b'):
    #     if message.text.startswith('/b –ø–æ–π–¥—É –Ω–∞ '):
    #         event_id = message.text.split()[-1]
    #         redis_ORM.set_user_for_event(event_id, message.from_user.id)
    #         bot.send_message(message.chat.id, f'–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ "{event_id}"')
    #     elif message.text.startswith('/b —Å–æ–∑–¥–∞—Ç—å '):
    #         event_id = message.text.split()[-1]
    #         redis_ORM.set_event_id(event_id)
    #         bot.send_message(message.chat.id, f'–î–æ–±–∞–≤–ª–µ–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "{event_id}"')
    #     elif message.text.startswith('/b –∫—Ç–æ –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ '):
    #         event_id = message.text.split()[-1]
    #         users_id = redis_ORM.get_users_by_event(event_id)
    #         bot.send_message(message.chat.id, f'id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫—Ç–æ –∏–¥—ë—Ç –Ω–∞ "{event_id}":{users_id}')
    #     else:
    #         bot.send_message(message.chat.id, f'–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. /help')

# def send_event_info(chat_id, event_id):
#     if event_id in requests_client_interface.get_all_events():
#         event_name = requests_client_interface.get_event_name(event_id)['event_name']
#         event_descr = requests_client_interface.get_event_descr(event_id)['event_descr']
#         event_date = requests_client_interface.get_event_date(event_id)['event_date']
#         event_url = requests_client_interface.get_event_url(event_id)['event_url']
#         event_theme = requests_client_interface.get_event_theme(event_id)['event_theme']
#         message_text = f"""–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {event_name} ({event_date}).
# –û–ø–∏—Å–∞–Ω–∏–µ: {event_descr}
# –°—Å—ã–ª–∫–∞: {event_url}
# –¢–µ–≥–∏: {','.join(event_theme)}"""

#         keyboard = types.InlineKeyboardMarkup()
#         url_button = types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ",url=event_url)
#         keyboard.add(url_button)
#         url_button = types.InlineKeyboardButton(text="–Ø –ø–æ–π–¥—É",callback_data='user_go_event')
#         keyboard.add(url_button)
#     else:
#         keyboard = types.InlineKeyboardMarkup()
#         message_text = f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏e ({event_id}) –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
#     bot.send_message(chat_id, message_text, reply_markup=keyboard)



@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.data == 'bot_active_button':
        result_dict = requests_client_interface.change_option_bot_active_for_conf(call.message.chat.id)
        if result_dict['result']:
            if result_dict['new_opt'] == '1':
                bot.send_message(call.message.chat.id, 'üü¢ –ë–æ—Ç –≤–∫–ª—é—á—ë–Ω')
            else:
                bot.send_message(call.message.chat.id, 'üî¥ –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω')
    elif call.data == 'event_cost_button':
        bot.answer_callback_query(callback_query_id=call.id, text='–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –µ—â—ë –Ω–µ–¥–æ–ø—É—Å—Ç—É–ø–Ω–∞.\n–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.')
        # result_dict = requests_client_interface.change_option_event_cost_for_conf(call.message.chat.id)
        # if result_dict['result']:
        #     if result_dict['new_opt'] == '1':
        #         bot.send_message(call.message.chat.id, 'üü§ –¢–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')
        #     else:
        #         bot.send_message(call.message.chat.id, 'üü§ –¢–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')

    elif call.data == 'filter_themes_button':
        result_dict = requests_client_interface.change_option_filter_themes_for_conf(call.message.chat.id)
        if result_dict['result']:
            if result_dict['new_opt'] == '1':
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(types.InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ–º—ã",callback_data='filter_themes_menu_button'))

                bot.send_message(call.message.chat.id, 'üü¢ –í–∫–ª—é—á–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ç–µ–º–∞–º', reply_markup=keyboard)
            else:
                bot.send_message(call.message.chat.id, 'üî¥ –í—ã–∫–ª—é—á–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–º–∞–º')

    elif call.data == 'filter_themes_menu_button':
        bot.send_message(call.message.chat.id, '–ø–æ–º–µ–Ω—è—Ç—å —Ç–µ–º—ã')
    elif call.data.startswith('user_go_event_button:'):
        event_id = call.data.split(':')[1]
        user_id = call.from_user.id
        result = requests_client_interface.set_user_for_event(event_id, user_id)['result']
        if result == 1:
            bot.answer_callback_query(callback_query_id=call.id, text='–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.')
        elif result == 0:
            bot.answer_callback_query(callback_query_id=call.id, text='–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.')
        else:
            bot.answer_callback_query(callback_query_id=call.id, text='–ü—Ä–æ—Å–∏–º –ø—Ä–æ—â–µ–Ω–∏–µ, –≤ –¥–∞–Ω–Ω—ã–º –º–æ–º–µ–Ω—Ç —ç—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.')

    elif call.data.startswith('user_doesnt_go_event_button:'):
        event_id = call.data.split(':')[1]
        user_id = call.from_user.id
        result = requests_client_interface.del_user_for_event(event_id, user_id)['result']
        if 1 in result:
            bot.answer_callback_query(callback_query_id=call.id, text='–ó–∞–ø–∏—Å—å –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω—ã.')
        elif result == [0,0]:
            bot.answer_callback_query(callback_query_id=call.id, text='–í—ã –Ω–µ –±—ã–ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.')
        else:
            bot.answer_callback_query(callback_query_id=call.id, text='–ü—Ä–æ—Å–∏–º –ø—Ä–æ—â–µ–Ω–∏–µ, –≤ –¥–∞–Ω–Ω—ã–º –º–æ–º–µ–Ω—Ç —ç—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.')

    elif call.data.startswith('remind_user_go_event_button:'):
        event_id = call.data.split(':')[1]
        user_id = call.from_user.id
        result = requests_client_interface.set_user_remind_for_event(event_id, user_id)['result']
        if result == 1:
            bot.answer_callback_query(callback_query_id=call.id, text='–ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –≤–∞—Å.')
        elif result == 0:
            bot.answer_callback_query(callback_query_id=call.id, text='–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–∂–µ —Å—Ç–æ–∏—Ç.')
        else:
            bot.answer_callback_query(callback_query_id=call.id, text='–ü—Ä–æ—Å–∏–º –ø—Ä–æ—â–µ–Ω–∏–µ, –≤ –¥–∞–Ω–Ω—ã–º –º–æ–º–µ–Ω—Ç —ç—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.')



bot.polling(none_stop=True, interval=0)


